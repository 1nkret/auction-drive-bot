from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from core.models import User, SearchSettings
from typing import Optional

router = Router()

class FilterStates(StatesGroup):
    waiting_for_mark = State()
    waiting_for_model = State()
    waiting_for_year = State()
    waiting_for_mileage = State()
    waiting_for_engine_type = State()
    waiting_for_drive_type = State()
    waiting_for_price = State()
    waiting_for_damage = State()

# Start command handler
@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    # Create or get user
    user = await session.get(User, message.from_user.id)
    if not user:
        user = User(telegram_id=message.from_user.id)
        session.add(user)
        await session.commit()
    
    # Create or get search settings
    settings = await session.get(SearchSettings, user.id)
    if not settings:
        settings = SearchSettings(user_id=user.id)
        session.add(settings)
        await session.commit()
    
    # Send welcome message with filter setup
    builder = InlineKeyboardBuilder()
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="setup_filters")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="search_cars")
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.",
        reply_markup=builder.as_markup()
    )

# Filter setup handlers
@router.callback_query(F.data == "setup_filters")
async def setup_filters(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–∞—Ä–∫–∞", callback_data="filter_mark")
    builder.button(text="–ú–æ–¥–µ–ª—å", callback_data="filter_model")
    builder.button(text="–ì–æ–¥", callback_data="filter_year")
    builder.button(text="–ü—Ä–æ–±–µ–≥", callback_data="filter_mileage")
    builder.button(text="–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è", callback_data="filter_engine")
    builder.button(text="–ü—Ä–∏–≤–æ–¥", callback_data="filter_drive")
    builder.button(text="–¶–µ–Ω–∞", callback_data="filter_price")
    builder.button(text="–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="filter_damage")
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="filters_done")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=builder.as_markup()
    )

# Mark filter handler
@router.callback_query(F.data == "filter_mark")
async def set_mark(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.waiting_for_mark)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota, BMW, Mercedes):"
    )

@router.message(StateFilter(FilterStates.waiting_for_mark))
async def process_mark(message: Message, state: FSMContext, session: AsyncSession):
    user = await session.get(User, message.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    settings.mark = message.text
    await session.commit()
    
    await state.clear()
    await message.answer(f"–ú–∞—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")
    await setup_filters(message, state)

# Model filter handler
@router.callback_query(F.data == "filter_model")
async def set_model(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.waiting_for_model)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
    )

@router.message(StateFilter(FilterStates.waiting_for_model))
async def process_model(message: Message, state: FSMContext, session: AsyncSession):
    user = await session.get(User, message.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    settings.model = message.text
    await session.commit()
    
    await state.clear()
    await message.answer(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")
    await setup_filters(message, state)

# Year filter handler
@router.callback_query(F.data == "filter_year")
async def set_year(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.waiting_for_year)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2010-2020):"
    )

@router.message(StateFilter(FilterStates.waiting_for_year))
async def process_year(message: Message, state: FSMContext, session: AsyncSession):
    try:
        min_year, max_year = map(int, message.text.split("-"))
        user = await session.get(User, message.from_user.id)
        settings = await session.get(SearchSettings, user.id)
        settings.min_year = min_year
        settings.max_year = max_year
        await session.commit()
        
        await state.clear()
        await message.answer(f"–î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_year}-{max_year}")
        await setup_filters(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2010-2020)")

# Mileage filter handler
@router.callback_query(F.data == "filter_mileage")
async def set_mileage(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.waiting_for_mileage)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:"
    )

@router.message(StateFilter(FilterStates.waiting_for_mileage))
async def process_mileage(message: Message, state: FSMContext, session: AsyncSession):
    try:
        mileage = int(message.text)
        user = await session.get(User, message.from_user.id)
        settings = await session.get(SearchSettings, user.id)
        settings.max_mileage = mileage
        await session.commit()
        
        await state.clear()
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mileage} –∫–º")
        await setup_filters(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# Engine type filter handler
@router.callback_query(F.data == "filter_engine")
async def set_engine_type(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ë–µ–Ω–∑–∏–Ω", callback_data="engine_petrol")
    builder.button(text="–î–∏–∑–µ–ª—å", callback_data="engine_diesel")
    builder.button(text="–≠–ª–µ–∫—Ç—Ä–æ", callback_data="engine_electric")
    builder.button(text="–ì–∏–±—Ä–∏–¥", callback_data="engine_hybrid")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("engine_"))
async def process_engine_type(callback: CallbackQuery, session: AsyncSession):
    engine_type = callback.data.split("_")[1]
    user = await session.get(User, callback.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    settings.engine_type = engine_type
    await session.commit()
    
    await callback.message.edit_text(f"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {engine_type}")
    await setup_filters(callback, None)

# Drive type filter handler
@router.callback_query(F.data == "filter_drive")
async def set_drive_type(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–¥–Ω–∏–π", callback_data="drive_front")
    builder.button(text="–ó–∞–¥–Ω–∏–π", callback_data="drive_back")
    builder.button(text="–ü–æ–ª–Ω—ã–π", callback_data="drive_full")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("drive_"))
async def process_drive_type(callback: CallbackQuery, session: AsyncSession):
    drive_type = callback.data.split("_")[1]
    user = await session.get(User, callback.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    settings.drive_type = drive_type
    await session.commit()
    
    await callback.message.edit_text(f"–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {drive_type}")
    await setup_filters(callback, None)

# Price filter handler
@router.callback_query(F.data == "filter_price")
async def set_price(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.waiting_for_price)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000-20000):"
    )

@router.message(StateFilter(FilterStates.waiting_for_price))
async def process_price(message: Message, state: FSMContext, session: AsyncSession):
    try:
        min_price, max_price = map(int, message.text.split("-"))
        user = await session.get(User, message.from_user.id)
        settings = await session.get(SearchSettings, user.id)
        settings.min_price = min_price
        settings.max_price = max_price
        await session.commit()
        
        await state.clear()
        await message.answer(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${min_price}-${max_price}")
        await setup_filters(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000-20000)")

# Damage filter handler
@router.callback_query(F.data == "filter_damage")
async def set_damage(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="damage_yes")
    builder.button(text="–ù–µ—Ç", callback_data="damage_no")
    builder.button(text="–ù–µ –≤–∞–∂–Ω–æ", callback_data="damage_any")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("damage_"))
async def process_damage(callback: CallbackQuery, session: AsyncSession):
    damage_setting = callback.data.split("_")[1]
    user = await session.get(User, callback.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    settings.allow_damaged = damage_setting != "no"
    await session.commit()
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {'–î–∞' if damage_setting == 'yes' else '–ù–µ—Ç' if damage_setting == 'no' else '–ù–µ –≤–∞–∂–Ω–æ'}"
    )
    await setup_filters(callback, None)

# Finish filter setup
@router.callback_query(F.data == "filters_done")
async def finish_filters(callback: CallbackQuery, session: AsyncSession):
    user = await session.get(User, callback.from_user.id)
    settings = await session.get(SearchSettings, user.id)
    
    # Show current settings
    settings_text = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n\n"
        f"–ú–∞—Ä–∫–∞: {settings.mark or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ú–æ–¥–µ–ª—å: {settings.model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ì–æ–¥: {f'{settings.min_year}-{settings.max_year}' if settings.min_year and settings.max_year else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü—Ä–æ–±–µ–≥: {f'–¥–æ {settings.max_mileage} –∫–º' if settings.max_mileage else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {settings.engine_type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü—Ä–∏–≤–æ–¥: {settings.drive_type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–¶–µ–Ω–∞: {f'${settings.min_price}-${settings.max_price}' if settings.min_price and settings.max_price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: {'–†–∞–∑—Ä–µ—à–µ–Ω—ã' if settings.allow_damaged else '–ó–∞–ø—Ä–µ—â–µ–Ω—ã'}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search_cars")
    builder.button(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="setup_filters")
    
    await callback.message.edit_text(settings_text, reply_markup=builder.as_markup()) 